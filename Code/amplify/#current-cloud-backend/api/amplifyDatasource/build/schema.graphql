enum Priority {
  LOW
  NORMAL
  HIGH
}

type Booking {
  id: ID!
  passengerID: Int!
  routeID: Int!
  quantity: Int!
  dateTime: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelBookingConnection {
  items: [Booking]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelBookingFilterInput {
  id: ModelIDInput
  passengerID: ModelIntInput
  routeID: ModelIntInput
  quantity: ModelIntInput
  dateTime: ModelStringInput
  and: [ModelBookingFilterInput]
  or: [ModelBookingFilterInput]
  not: ModelBookingFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  syncBookings(filter: ModelBookingFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelBookingConnection
  getBooking(id: ID!): Booking
  listBookings(filter: ModelBookingFilterInput, limit: Int, nextToken: String): ModelBookingConnection
}

input CreateBookingInput {
  id: ID
  passengerID: Int!
  routeID: Int!
  quantity: Int!
  dateTime: AWSDateTime!
  _version: Int
}

input UpdateBookingInput {
  id: ID!
  passengerID: Int
  routeID: Int
  quantity: Int
  dateTime: AWSDateTime
  _version: Int
}

input DeleteBookingInput {
  id: ID
  _version: Int
}

type Mutation {
  createBooking(input: CreateBookingInput!, condition: ModelBookingConditionInput): Booking
  updateBooking(input: UpdateBookingInput!, condition: ModelBookingConditionInput): Booking
  deleteBooking(input: DeleteBookingInput!, condition: ModelBookingConditionInput): Booking
}

input ModelBookingConditionInput {
  passengerID: ModelIntInput
  routeID: ModelIntInput
  quantity: ModelIntInput
  dateTime: ModelStringInput
  and: [ModelBookingConditionInput]
  or: [ModelBookingConditionInput]
  not: ModelBookingConditionInput
}

type Subscription {
  onCreateBooking: Booking @aws_subscribe(mutations: ["createBooking"])
  onUpdateBooking: Booking @aws_subscribe(mutations: ["updateBooking"])
  onDeleteBooking: Booking @aws_subscribe(mutations: ["deleteBooking"])
}
